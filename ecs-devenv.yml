---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a full development environment on ECS
Parameters:
  ShouldCreateNetworkInfraAndService:
    Type: String
    Description: Whether to create the network infrastructure or not
    AllowedValues: ['true', 'false']
    Default: 'true'
  DesiredEnvironmentCount:
    Type: Number
    Description: The number of environments to spin up
    MinValue: 1
    Default: 1
  DevEnvTaskDefFamilyName:
    Type: String
    Description: The family name to give the task definition
    Default: devenv-taskdef
  DevEnvContainerImage:
    Type: String
    Description: The image to use to spin up a devenv
    Default: yashdalfthegray/devenv
  DevEnvClusterName:
    Type: String
    Description: The name of the cluster to put the service in
    Default: devenv-cluster
  DevEnvServiceName:
    Type: String
    Description: The name of the ECS service for the development environments
    Default: devenv-service

Conditions:
  CreateNetworkResourcesAndFargateService:
    Fn::Equals:
      - !Ref ShouldCreateNetworkInfraAndService
      - 'true'

Resources:
  DevEnvTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Volumes: []
      NetworkMode: awsvpc
      Memory: 2048
      Cpu: 512
      ExecutionRoleArn: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      PlacementConstraints: []
      Family: !Ref DevEnvTaskDefFamilyName
      ContainerDefinitions:
        - Name: devenv-instance
          Image: !Ref DevEnvContainerImage
          Essential: true

  DevEnvCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref DevEnvClusterName

  Vpc:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  PublicSubnet:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: !Ref AWS::Region

  InternetGateway:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteViaIgw:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRouteViaIgw:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteViaIgw

  DevEnvSecurityGroup:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load test tasks
      VpcId: !Ref Vpc

  DevEnvService:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref DevEnvCluster
      DesiredCount: !Ref DesiredEnvironmentCount
      LaunchType: FARGATE
      ServiceName: !Ref DevEnvServiceName
      TaskDefinition: !Ref DevEnvTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt DevEnvSecurityGroup.GroupId
          Subnets:
            - !Ref PublicSubnet
