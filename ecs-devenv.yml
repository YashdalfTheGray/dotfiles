---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a full development environment on ECS
Parameters:
  ShouldCreateNetworkInfraAndService:
    Type: String
    Description: Whether to create the network infrastructure or not
    AllowedValues: ['true', 'false']
    Default: 'true'
  DesiredEnvironmentCount:
    Type: Number
    Description: The number of environments to spin up
    MinValue: 1
    Default: 1
  DevEnvTaskDefFamilyName:
    Type: String
    Description: The family name to give the task definition
    Default: devenv-taskdef
  DevEnvContainerImage:
    Type: String
    Description: The image to use to spin up a devenv
    Default: yashdalfthegray/devenv
  DevEnvClusterName:
    Type: String
    Description: The name of the cluster to put the service in
    Default: devenv-cluster
  DevEnvServiceName:
    Type: String
    Description: The name of the ECS service for the development environments
    Default: devenv-service
  VpcCidrBlock:
    Type: String
    Description: The CIDR block to use while creating the VPC
    Default: 10.0.0.0/16
  PublicSubnetCidrBlock:
    Type: String
    Description: The CIDR block to use while creating the public subnet
    Default: 10.0.0.0/24
  PreferredAvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: The availability zone to use for the public subnet

Conditions:
  CreateNetworkResourcesAndFargateService:
    Fn::Equals:
      - !Ref ShouldCreateNetworkInfraAndService
      - 'true'
  AvailabilityZoneSpecified:
    Fn::Not:
      - Fn::Equals:
          - !Ref PreferredAvailabilityZone
          - ''

Resources:
  DevEnvTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ecs-devenv-task-role-${AWS::Region}'
      Description: An ECS task role for devenv tasks
      MaxSessionDuration: 7200
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: 'Allow ECS Tasks to assume role'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  EcsExecSsmPermissionsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'Allow SSM permissions for ECS Exec'
            Effect: Allow
            Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: '*'
      PolicyName: EcsExecSsmPermissionsPolicy
      Roles:
        - !Ref DevEnvTaskRole

  DevEnvTaskDefinition:
    DependsOn:
      - EcsExecSsmPermissionsPolicy
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Volumes: []
      NetworkMode: awsvpc
      Memory: 2048
      Cpu: 512
      ExecutionRoleArn: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      TaskRoleArn: !GetAtt DevEnvTaskRole.Arn
      PlacementConstraints: []
      Family: !Ref DevEnvTaskDefFamilyName
      ContainerDefinitions:
        - Name: devenv-instance
          Image: !Ref DevEnvContainerImage
          Essential: true
          LinuxParameters:
            InitProcessEnabled: true

  DevEnvCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref DevEnvClusterName

  Vpc:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  PublicSubnet:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidrBlock
      AvailabilityZone:
        Fn::If:
          - AvailabilityZoneSpecified
          - !Ref PreferredAvailabilityZone
          - Fn::Select:
              - '0'
              - Fn::GetAZs: !Ref AWS::Region

  InternetGateway:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteViaIgw:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRouteViaIgw:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteViaIgw

  DevEnvSecurityGroup:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the development environment fargate tasks
      VpcId: !Ref Vpc

  DevEnvService:
    Condition: CreateNetworkResourcesAndFargateService
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref DevEnvCluster
      DesiredCount: !Ref DesiredEnvironmentCount
      LaunchType: FARGATE
      ServiceName: !Ref DevEnvServiceName
      TaskDefinition: !Ref DevEnvTaskDefinition
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt DevEnvSecurityGroup.GroupId
          Subnets:
            - !Ref PublicSubnet
